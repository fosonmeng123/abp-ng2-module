{"version":3,"file":"message.service.js","sourceRoot":"","sources":["../../../src/message/message.service.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAG3C;IAAA;IA6BA,CAAC;IA3BG,6BAAI,GAAJ,UAAK,OAAe,EAAE,KAAc,EAAE,MAAgB;QAClD,OAAO,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;IACpD,CAAC;IAED,gCAAO,GAAP,UAAQ,OAAe,EAAE,KAAc,EAAE,MAAgB;QACrD,OAAO,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;IACvD,CAAC;IAED,6BAAI,GAAJ,UAAK,OAAe,EAAE,KAAc,EAAE,MAAgB;QAClD,OAAO,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;IACpD,CAAC;IAED,8BAAK,GAAL,UAAM,OAAe,EAAE,KAAc,EAAE,MAAgB;QACnD,OAAO,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;IACrD,CAAC;IAKD,gCAAO,GAAP,UAAQ,OAAe,EAAE,eAAsD,EAAE,QAAoC,EAAE,MAAgB;QACnI,IAAI,OAAO,eAAe,IAAI,QAAQ,EAAE;YACpC,OAAO,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,EAAE,eAAyB,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;SACpF;aAAM;YACH,OAAO,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,EAAE,SAAS,EAAE,eAA8C,EAAE,MAAM,CAAC,CAAC;SAC1G;IACL,CAAC;IA3BQ,cAAc;QAD1B,UAAU,EAAE;OACA,cAAc,CA6B1B;IAAD,qBAAC;CAAA,AA7BD,IA6BC;SA7BY,cAAc","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class MessageService {\r\n\r\n    info(message: string, title?: string, isHtml?: boolean): any {\r\n        return abp.message.info(message, title, isHtml);\r\n    }\r\n\r\n    success(message: string, title?: string, isHtml?: boolean): any {\r\n        return abp.message.success(message, title, isHtml);\r\n    }\r\n\r\n    warn(message: string, title?: string, isHtml?: boolean): any {\r\n        return abp.message.warn(message, title, isHtml);\r\n    }\r\n\r\n    error(message: string, title?: string, isHtml?: boolean): any {\r\n        return abp.message.error(message, title, isHtml);\r\n    }\r\n\r\n    confirm(message: string, callback?: (result: boolean) => void): any;\r\n    confirm(message: string, title?: string, callback?: (result: boolean) => void, isHtml?: boolean): any;\r\n\r\n    confirm(message: string, titleOrCallBack?: string | ((result: boolean) => void), callback?: (result: boolean) => void, isHtml?: boolean): any {\r\n        if (typeof titleOrCallBack == 'string') {\r\n            return abp.message.confirm(message, titleOrCallBack as string, callback, isHtml);\r\n        } else {\r\n            return abp.message.confirm(message, undefined, titleOrCallBack as ((result: boolean) => void), isHtml);\r\n        }\r\n    }\r\n\r\n}"]}